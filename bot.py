from teleapp import TeleBot, types
from settings import *
from DataBase import DataBaseJson
from DataBaseBot import DataBaseJsonBot


class Status:
    Start = '/main'
    CreateNewNickname = "/create_new_nickname"
    StopChangeNickname = "/stop_change_nickname"
    WaitAuth = "/wait_auth"
    ConfirmAuth = "/authorizated"
    StopLengthNickname = "/stop_length_nick_name"


class StatusText:
    Start = "–ú–µ–Ω—é"
    CreateNewNickname = "–ù–æ–≤—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –Ω–∏–∫–Ω–µ–π–º"
    StopLengthNickname = "–ó–∞–∫–æ–Ω—á–∏—Ç—å"
    WaitAuth = "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
    ConfirmAuth = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
    StopChangeNickname = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞"


app = TeleBot(token=token)
callback_data = {}
db = DataBaseJsonBot()
db_server = DataBaseJson("unrealskill.ueuo.com", "unrealskill.ueuo.com", "shluxa_111!")


def buttons(message):
    if db.get_status(message.chat.id) == Status.Start:
        markupReply = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton(StatusText.CreateNewNickname)
        markupReply.add(btn1)
        btn2 = types.KeyboardButton(StatusText.StopChangeNickname)
        markupReply.add(btn2)
        return markupReply
    if db.get_status(message.chat.id) == Status.CreateNewNickname:
        markupReply = types.ReplyKeyboardMarkup()
        btn1 = types.KeyboardButton(StatusText.StopLengthNickname)
        markupReply.add(btn1)
        return markupReply
    if db.get_status(message.chat.id) == Status.WaitAuth:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        auth_butt = types.InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", url='https://www.telegram-api.tk/?username=' + str(message.chat.id))
        keyboard.add(auth_butt)
        return keyboard


def sendMessage(message, message_to_send):
    app.send_message(message.chat.id, message_to_send, reply_markup=buttons(message))


def date_to_string(date):
    return f"{date.year}-{date.month}-{date.day}-{date.hour}-{date.minute}-{date.second}"


def editMessageWithMarkup(message, message_to_edit):
    app.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=message_to_edit)
    app.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id,
                                  reply_markup=buttons(message))


def editMessage(message, message_to_edit):
    app.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=message_to_edit)


@app.message_handler(commands=['start'])
def send_welcome(message):
    db.set_status(message.chat.id, Status.Start)
    sendMessage(message, "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞\nüëá –°–Ω–∏–∑—É –ø–æ—è–≤–∏–ª–∏—Å—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")


@app.message_handler(content_types=['text'])
def body(message):

        if db.get_status(message.chat.id) == Status.WaitAuth and message.text == StatusText.ConfirmAuth:
            if db_server.get_session(message.chat.id)["valid"]:
                db.set_status(message.chat.id, Status.CreateNewNickname)
                db_server.set_status(message.chat.id, db.get_status(message.chat.id))
                db_server.set_nickname(message.chat.id, db.get_nickname(message.chat.id))
                db_server.set_duration(message.chat.id, db.get_duration(message.chat.id))
                db_server.save()
                sendMessage(message, "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–¥–∞–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è")
        if message.text == StatusText.CreateNewNickname:
            db.set_status(message.chat.id, Status.CreateNewNickname)
            sendMessage(message, "–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∏–∫–∞ (–æ—Ç 2 –¥–æ 20)\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–∑–∞–∫–æ–Ω—á–∏—Ç—å'")
            db.set_nickname(message.chat.id, [])
        if message.text == StatusText.StopChangeNickname:
            db.set_status(message.chat.id, Status.StopChangeNickname)
        if message.text == StatusText.StopLengthNickname and db.get_status(message.chat.id) == Status.CreateNewNickname:
            db.set_status(message.chat.id, Status.StopLengthNickname)
            sendMessage(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏\n(–æ—Ç 1 –¥–æ 10 —Å–µ–∫—É–Ω–¥, —Ç–∞–∫–æ–≤—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞üòî)")
        if db.get_status(message.chat.id) == Status.CreateNewNickname:
            current_nickname = db.get_nickname(message.chat.id)
            current_nickname.append(message.text)
            db.set_nickname(message.chat.id, current_nickname)
        if db.get_status(message.chat.id) == Status.StopLengthNickname:
            if message.text.isdigit():
                db.set_duration(message.chat.id, int(float(message.text)))
                db.set_status(message.chat.id, Status.WaitAuth)
                sendMessage(message, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å api –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏üëá")


if __name__ == "__main__":
    app.polling(non_stop=True)


